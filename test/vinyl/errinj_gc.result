test_run = require('test_run').new()
---
...
fiber = require('fiber')
---
...
fio = require('fio')
---
...
errinj = box.error.injection
---
...
-- Temporary space for bumping lsn.
temp = box.schema.space.create('temp')
---
...
_ = temp:create_index('pk')
---
...
path = test_run:get_cfg('index_options').path
---
...
s = box.schema.space.create('test', {engine='vinyl'})
---
...
_ = s:create_index('pk', {path=path, run_count_per_level=1})
---
...
if not path then path = fio.pathjoin(box.cfg.vinyl_dir, tostring(s.id), tostring(s.index.pk.id)) end
---
...
function run_count() return box.info.vinyl().db[s.id..'/'..s.index.pk.id].run_count end
---
...
function file_count() return #fio.glob(fio.pathjoin(path, '*')) end
---
...
function snapshot() box.snapshot() box.internal.gc(box.info.cluster.signature) end
---
...
--
-- Check that gc retries to delete files left
-- from compacted runs.
--
errinj.set('ERRINJ_VY_GC', true)
---
- ok
...
s:insert{12345, 'abcdef'} snapshot() -- dump
---
...
s:insert{67890, 'ghijkl'} snapshot() -- dump + compaction
---
...
while run_count() > 1 do fiber.sleep(0.01) end -- wait for compaction
---
...
file_count()
---
- 6
...
temp:auto_increment{} snapshot()
---
...
file_count()
---
- 6
...
errinj.set('ERRINJ_VY_GC', false)
---
- ok
...
temp:auto_increment{} snapshot()
---
...
file_count()
---
- 2
...
--
-- Check that gc retries to delete files left
-- from dropped indexes.
--
errinj.set('ERRINJ_VY_GC', true)
---
- ok
...
s:drop() snapshot()
---
...
file_count()
---
- 2
...
errinj.set('ERRINJ_VY_GC', false)
---
- ok
...
temp:auto_increment{} snapshot()
---
...
file_count()
---
- 0
...
--
-- Check that files left from incomplete runs are deleted
-- upon recovery completion.
--
path = test_run:get_cfg('index_options').path
---
...
s = box.schema.space.create('test', {engine='vinyl'})
---
...
_ = s:create_index('pk', {path=path, run_count_per_level=1})
---
...
if not path then path = fio.pathjoin(box.cfg.vinyl_dir, tostring(s.id), tostring(s.index.pk.id)) end
---
...
s:insert{100, '12345'} snapshot() -- dump
---
...
file_count()
---
- 2
...
errinj.set('ERRINJ_VY_RUN_DISCARD', true)
---
- ok
...
errinj.set('ERRINJ_VY_TASK_COMPLETE', true)
---
- ok
...
s:insert{200, '67890'} snapshot() -- run file created, but dump fails
---
- error: Error injection 'vinyl task completion'
...
file_count()
---
- 4
...
test_run:cmd('restart server default')
test_run = require('test_run').new()
---
...
fio = require('fio')
---
...
s = box.space.test
---
...
temp = box.space.temp
---
...
path = test_run:get_cfg('index_options').path
---
...
if not path then path = fio.pathjoin(box.cfg.vinyl_dir, tostring(s.id), tostring(s.index.pk.id)) end
---
...
function file_count() return #fio.glob(fio.pathjoin(path, '*')) end
---
...
function snapshot() box.snapshot() box.internal.gc(box.info.cluster.signature) end
---
...
file_count()
---
- 2
...
s:select()
---
- - [100, '12345']
  - [200, '67890']
...
--
-- Cleanup.
--
s:drop() snapshot()
---
...
file_count()
---
- 0
...
temp:drop()
---
...
