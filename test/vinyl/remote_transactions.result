remote = require('net.box')
---
...
fiber = require('fiber')
---
...
log = require('log')
---
...
env = require('test_run')
---
...
test_run = env.new()
---
...
LISTEN = require('uri').parse(box.cfg.listen)
---
...
local_space = box.schema.space.create('test', { engine = 'vinyl' })
---
...
pk = local_space:create_index('primary')
---
...
box.schema.user.grant('guest', 'read,write,execute', 'universe')
---
...
function local_replace(tuple) return local_space:replace(tuple) end
---
...
log.info("create connection")
---
...
conn = remote.connect(LISTEN.host, LISTEN.service)
---
...
log.info("state is %s", conn.state)
---
...
conn:ping()
---
- true
...
log.info("ping is done")
---
...
remote_space = conn.space.test
---
...
-- Check that a transaction isn't stored in the connection, if
-- explicit conn:begin() wasn't called.
conn:eval('return 2 + 2')
---
- 4
...
remote_space:replace({1})
---
- [1]
...
remote_space:select{}
---
- - [1]
...
-- Nothing to rollback, so the next select returns the same
-- result.
conn:rollback()
---
- true
...
remote_space:select{}
---
- - [1]
...
remote_space:delete({1})
---
...
remote_space:select{}
---
- []
...
--
-- Test BEGIN of the new remote transaction.
--
conn:begin()
---
- true
...
-- No error: the remote transaction is stored in the connection
-- object, so we can create also localhost transactions.
box.begin()
---
...
-- Error - this connection in this fiber already has the opened
-- transaction.
conn:begin()
---
- error: 'Operation is not permitted when there is an active transaction '
...
-- Commit the local transaction, but the remote is still alive, so
-- conn:begin() returns error again.
box.commit()
---
...
conn:begin()
---
- error: 'Operation is not permitted when there is an active transaction '
...
conn:commit()
---
- true
...
--
-- Test attaching remote requests to the connection transaction.
--
-- Attach space:method()
conn:begin()
---
- true
...
remote_space:replace({1})
---
- [1]
...
remote_space:replace({2})
---
- [2]
...
remote_space:select{} -- check result of the remote select
---
- - [1]
  - [2]
...
local_space:select{} -- result of the local select
---
- []
...
conn:commit()
---
- true
...
remote_space:select{}
---
- - [1]
  - [2]
...
local_space:select{}
---
- - [1]
  - [2]
...
-- Attach call/eval
conn:begin()
---
- true
...
conn:eval('local_space:replace({1, 1})')
---
...
conn:call('local_replace', {2, 2})
---
- [2, 2]
...
remote_space:select{}
---
- - [1, 1]
  - [2, 2]
...
local_space:select{}
---
- - [1]
  - [2]
...
conn:commit()
---
- true
...
remote_space:select{}
---
- - [1, 1]
  - [2, 2]
...
local_space:select{}
---
- - [1, 1]
  - [2, 2]
...
-- Check errors in call/eval. Error in call/eval must not rollback
-- the entire transaction.
conn:begin()
---
- true
...
remote_space:replace({1})
---
- [1]
...
conn:eval('box.box.box(123(456))')
---
- error: 'eval:1: '')'' expected near ''('''
...
remote_space:select{}
---
- - [1]
  - [2, 2]
...
conn:call('error', '1', '2', '3')
---
- error: '1'
...
remote_space:select{}
---
- - [1]
  - [2, 2]
...
conn:commit()
---
- true
...
remote_space:select{}
---
- - [1]
  - [2, 2]
...
local_space:select{}
---
- - [1]
  - [2, 2]
...
-- Check BEGIN via iproto and COMMIT via eval or call.
conn:begin()
---
- true
...
remote_space:delete({2})
---
...
conn:eval('box.commit()')
---
...
remote_space:select{}
---
- - [1]
...
-- We can start the new transaction, because the eval commited the
-- previous one.
conn:begin()
---
- true
...
remote_space:replace({2})
---
- [2]
...
conn:call('box.commit')
---
...
remote_space:select{}
---
- - [1]
  - [2]
...
-- We can start the new transaction, because the call commited the
-- previous one.
conn:begin()
---
- true
...
conn:commit()
---
- true
...
remote_space:select{}
---
- - [1]
  - [2]
...
local_space:select{}
---
- - [1]
  - [2]
...
function create_and_leave_opened() box.begin() local_space:replace({10}) end
---
...
-- Check rollback of the transaction, created in eval or call.
conn:eval('create_and_leave_opened()')
---
...
remote_space:select{}
---
- - [1]
  - [2]
...
local_space:select{}
---
- - [1]
  - [2]
...
conn:call('create_and_leave_opened')
---
...
remote_space:select{}
---
- - [1]
  - [2]
...
local_space:select{}
---
- - [1]
  - [2]
...
-- Check rollback on dicsonnect.
-- Create three transactions in separate fibers and replace some
-- tuples.
f1 = fiber.create(function() conn:begin() remote_space:replace({14}) fiber.sleep(10000) end)
---
...
f2 = fiber.create(function() conn:begin() remote_space:replace({15}) fiber.sleep(10000) end)
---
...
conn:begin()
---
- true
...
remote_space:replace({11})
---
- [11]
...
remote_space:replace({12})
---
- [12]
...
remote_space:replace({13})
---
- [13]
...
-- All transactions are aborted after the connection closed.
conn:close()
---
...
-- Close begins in net thread, so we wait half of a second until
-- close is finished.
fiber.sleep(0.5)
---
...
local_space:select{}
---
- - [1]
  - [2]
...
f1:cancel()
---
...
f2:cancel()
---
...
-- Check remote two-phase transactions.
conn = remote.connect(LISTEN.host, LISTEN.service)
---
...
log.info("state is %s", conn.state)
---
...
conn:ping()
---
- true
...
server_id = box.info().server.id
---
...
remote_space = conn.space.test
---
...
-- Wrong usage
conn:begin_two_phase() -- fail with incorrect argument
---
- error: 'Usage: begin_two_phase(coordinator_id)'
...
conn:prepare()
---
- error: 'Usage: prepare(coordinator_id)'
...
-- Commit the empty transaction.
conn:begin_two_phase(server_id)
---
- true
...
conn:prepare(server_id)
---
- true
...
conn:commit()
---
- true
...
-- Try to commit not prepared transaction.
conn:begin_two_phase(server_id)
---
- true
...
conn:commit() -- fail, firstly need prepare.
---
- error: Can't commit the two-phase transaction before prepare
...
conn:prepare(server_id)
---
- true
...
conn:commit() -- ok, the transaction prepared.
---
- true
...
-- Rollback not prepared transaction.
conn:begin_two_phase(server_id)
---
- true
...
remote_space:replace({14})
---
- [14]
...
remote_space:replace({15})
---
- [15]
...
remote_space:select{}
---
- - [1]
  - [2]
  - [14]
  - [15]
...
conn:rollback()
---
- true
...
remote_space:select{}
---
- - [1]
  - [2]
...
-- Rollback prepared.
conn:begin_two_phase(server_id)
---
- true
...
remote_space:replace({14})
---
- [14]
...
remote_space:replace({15})
---
- [15]
...
remote_space:select{}
---
- - [1]
  - [2]
  - [14]
  - [15]
...
conn:prepare(server_id)
---
- true
...
conn:rollback()
---
- true
...
remote_space:select{}
---
- - [1]
  - [2]
...
-- Modify prepared.
conn:begin_two_phase(server_id)
---
- true
...
remote_space:replace({16})
---
- [16]
...
remote_space:select{}
---
- - [1]
  - [2]
  - [16]
...
conn:prepare(server_id)
---
- true
...
remote_space:replace({17})
---
- error: The prepared transaction can't be changed
...
conn:commit()
---
- true
...
remote_space:select{}
---
- - [1]
  - [2]
  - [16]
...
local_space:select{}
---
- - [1]
  - [2]
  - [16]
...
local_space:drop()
---
...
box.schema.user.revoke('guest', 'read,write,execute', 'universe')
---
...
